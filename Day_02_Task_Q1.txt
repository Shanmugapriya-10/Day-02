1. Write a blog on the difference between document and window objects?

JavaScript plays a pivotal role in creating dynamic and interactive websites. When working with JavaScript, developers often encounter two essential objects: the `document` object and the `window` object. While they may seem similar at first glance, they serve distinct purposes and understanding their differences is crucial for effective web development. Let's delve into the dissimilarities between these two objects.

The Window Object:

The `window` object represents the browser window or tab where the web page content is displayed. It serves as the global object in client-side JavaScript, meaning that variables and functions declared in the global scope are properties and methods of the `window` object.

Key Characteristics of the Window Object:

1. Global Scope: Variables and functions declared globally are attached to the `window` object. For example, if you declare a variable `var x = 10;` in a script, `x` becomes a property of the `window` object (`window.x`).

2. Browser Properties and Methods: The `window` object provides access to various properties and methods related to the browser window, such as `window.innerWidth`, `window.innerHeight`, `window.location`, `window.alert()`, `window.setTimeout()`, and many more.

3. Frames and Pop-ups: It manages browser windows, frames, and pop-ups. Each frame or pop-up window is represented by its own `window` object, and they can communicate with each other using methods like `window.open()` and `window.postMessage()`.

4. Global Event Handlers: Events like `onclick`, `onload`, and `onresize` are properties of the `window` object, allowing developers to attach event listeners directly to the window.

The Document Object:

On the other hand, the `document` object represents the HTML document loaded in the browser window or frame. It provides methods and properties to manipulate the content of the document, such as accessing elements, modifying their attributes, and handling events.

Key Characteristics of the Document Object:

1. DOM Manipulation: The `document` object allows developers to interact with the HTML structure of the web page, enabling tasks such as selecting elements (`document.getElementById()`, `document.querySelector()`), manipulating their content (`element.innerHTML`, `element.textContent`), and modifying their attributes (`element.setAttribute()`, `element.classList`).

2. Event Handling: Developers can attach event listeners directly to specific elements within the document, enabling interactivity and responsiveness. For example, `document.addEventListener('click', callback)` listens for click events anywhere in the document.

3. Content Loading: It provides properties and methods to access and manipulate various aspects of the document content, such as `document.title`, `document.URL`, `document.head`, and `document.body`.

4. Forms and Input Handling: The `document` object facilitates working with forms and form elements, allowing developers to access form fields, submit forms, and validate user input.
